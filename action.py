import cv2
import time
import asyncio
import signal
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from aiogram import Router
from aiogram.filters import Command

# Telegram bot setup
TOKEN = ''
CHAT_ID = ''
PASSWORD = ''  # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏



authorized_chats = set()
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
start_time = time.time()

# Graceful shutdown function
async def shutdown():
    await bot.session.close()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# Function to handle shutdown signals
def shutdown_signal_handler(loop):
    print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    for task in asyncio.all_tasks(loop):
        task.cancel()
    loop.stop()

# Function to send photo
async def send_photo(photo_path, chat_id, reason):
    try:
        photo = FSInputFile(photo_path)
        reason_message = f"üì∏ *–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ*: _{reason}_"
        await bot.send_photo(chat_id=chat_id, photo=photo)
        await bot.send_message(chat_id=chat_id, text=reason_message, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

# Function to capture image asynchronously
async def capture_image(prefix):
    try:
        cap = cv2.VideoCapture(0, cv2.CAP_V4L2)
        if not cap.isOpened():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        
        ret, frame = cap.read()
        if ret:
            img_name = f"{prefix}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            cv2.imwrite(img_name, frame)
            cap.release()
            return img_name, frame
        cap.release()
        return None, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None, None

# Function to check camera availability
def is_camera_available():
    cap = cv2.VideoCapture(0, cv2.CAP_V4L2)
    if cap.isOpened():
        cap.release()
        return True
    return False

# Command handlers
@router.message(Command(commands=["help"]))
async def help_command(message: types.Message):
    help_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/auth <–ø–∞—Ä–æ–ª—å>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
        "/photo - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é\n"
        "/uptime - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
    )
    await message.answer(help_text, parse_mode='Markdown')

@router.message(Command(commands=["photo"]))
async def photo_command(message: types.Message):
    if message.chat.id not in authorized_chats:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
        return
    
    img_name, _ = await capture_image("manual_photo")
    if img_name:
        await send_photo(img_name, message.chat.id, "–ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã /photo")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫.")

@router.message(Command(commands=["uptime"]))
async def uptime_command(message: types.Message):
    if message.chat.id not in authorized_chats:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
        return

    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    uptime_message = f"üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã*: {uptime_seconds} —Å–µ–∫—É–Ω–¥."
    await message.answer(uptime_message, parse_mode='Markdown')

@router.message(Command(commands=["auth"]))
async def auth_command(message: types.Message):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/auth <–ø–∞—Ä–æ–ª—å>`.")
        return

    entered_password = message.text.split()[1]
    if entered_password == PASSWORD:
        authorized_chats.add(message.chat.id)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# Motion detection variables
prev_frame = None
motion_threshold = 50000  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è

# Periodic photo capture with motion detection
async def periodic_photo_capture():
    global prev_frame
    last_sent_time = time.time()

    if not is_camera_available():
        print("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return

    cap = cv2.VideoCapture(0, cv2.CAP_V4L2)
    if not cap.isOpened():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        return

    while True:
        try:
            ret, frame = cap.read()
            if not ret:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã.")
                break

            gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray_frame = cv2.GaussianBlur(gray_frame, (21, 21), 0)

            if prev_frame is None:
                prev_frame = gray_frame
                continue

            frame_delta = cv2.absdiff(prev_frame, gray_frame)
            thresh = cv2.threshold(frame_delta, 25, 255, cv2.THRESH_BINARY)[1]
            motion_score = cv2.countNonZero(thresh)

            if motion_score > motion_threshold and time.time() - last_sent_time > 10:
                img_name = f"motion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                cv2.imwrite(img_name, frame)
                await send_photo(img_name, CHAT_ID, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ")
                last_sent_time = time.time()

            prev_frame = gray_frame
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
            break

        await asyncio.sleep(0.1)

    cap.release()

# Main function
async def main():
    dp.include_router(router)
    await asyncio.gather(dp.start_polling(bot), periodic_photo_capture())

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    for sig in (signal.SIGINT, signal.SIGTERM, signal.SIGTSTP):  # –î–æ–±–∞–≤–ª—è–µ–º SIGTSTP –¥–ª—è Ctrl+Z
        loop.add_signal_handler(sig, lambda: asyncio.create_task(shutdown()))
    
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    finally:
        loop.run_until_complete(shutdown())
