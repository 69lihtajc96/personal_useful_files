#!/bin/bash

# –ü–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
DEFAULT_OUTPUT_DIR="$HOME/Sync/Obsidian/1 –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/1 CHAT GPT/3 –û—Ç–≤–µ—Ç—ã –æ—Ç GPT/–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã/–¢–∞–±–ª–∏—Ü—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—á–∞—Ç–∏/"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$#" -lt 1 ]; then
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {input_file.csv} [output_file.md]"
  exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
input_file="$1"
output_file="${2:-$DEFAULT_OUTPUT_DIR/$(basename "$input_file" .csv).md}"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$DEFAULT_OUTPUT_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "$input_file" ]; then
  echo "–û—à–∏–±–∫–∞: –§–∞–π–ª '$input_file' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
fi

# –í—ã–±–æ—Ä –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:"
echo "1) –î–∞—Ç–∞ | –í—Ä–µ–º—è | –§–∞–∑–∞ –õ—É–Ω—ã | WPM | Accuracy | Raw WPM | Consistency | –Ø–∑—ã–∫ (–§–ª–∞–≥)"
echo "2) WPM | Accuracy | –Ø–∑—ã–∫ (–§–ª–∞–≥) | Raw WPM | –î–∞—Ç–∞ | –í—Ä–µ–º—è | –§–∞–∑–∞ –õ—É–Ω—ã"
echo "3) Custom order (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3): " column_choice

case $column_choice in
  1)
    columns="date,time,moon_phase,wpm,acc,rawWpm,consistency,language_flag"
    ;;
  2)
    columns="wpm,acc,language_flag,rawWpm,date,time,moon_phase"
    ;;
  3)
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, date,time,moon_phase,wpm,acc): " columns
    ;;
  *)
    echo "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    columns="date,time,moon_phase,wpm,acc,rawWpm,consistency,language_flag"
    ;;
esac

# –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
echo "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:"
echo "1) WPM"
echo "2) Accuracy"
echo "3) Consistency"
echo "4) Raw WPM"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (1-4): " sort_column

case $sort_column in
  1) sort_column_name="wpm";;
  2) sort_column_name="acc";;
  3) sort_column_name="consistency";;
  4) sort_column_name="rawWpm";;
  *)
    echo "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º WPM –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    sort_column_name="wpm"
    ;;
esac

read -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('asc' –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏–ª–∏ 'desc' –¥–ª—è —É–±—ã–≤–∞–Ω–∏—è): " sort_order
if [[ "$sort_order" != "asc" && "$sort_order" != "desc" ]]; then
  echo "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–±—ã–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
  sort_order="desc"
fi

# Python –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
python3 << END
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import base64
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("$input_file")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
df['date'] = df['timestamp'].dt.strftime('%d-%m-%Y')
df['time'] = df['timestamp'].dt.strftime('%H:%M')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def add_time_emoji(time_str):
    hour = int(time_str.split(":")[0])
    if 5 <= hour < 12:
        return f"{time_str} üåû"
    elif 12 <= hour < 17:
        return f"{time_str} üå§Ô∏è"
    elif 17 <= hour < 21:
        return f"{time_str} üåÜ"
    else:
        return f"{time_str} üåô"

df['time'] = df['time'].apply(add_time_emoji)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–∑—ã –õ—É–Ω—ã
def moon_phase(date):
    diff = (datetime.strptime(date, '%d-%m-%Y') - datetime(2000, 1, 6)).days
    lunations = diff / 29.53058867
    phase_index = lunations % 1
    if phase_index < 0.03 or phase_index > 0.97:
        return "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif 0.22 < phase_index < 0.28:
        return "üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif 0.47 < phase_index < 0.53:
        return "üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif 0.72 < phase_index < 0.78:
        return "üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:
        return ""

df['moon_phase'] = df['date'].apply(moon_phase)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –≤ —Ñ–ª–∞–≥
def language_to_flag(language):
    return 'üá∑üá∫' if language == 'russian' else 'üá∫üá∏' if language == 'english' else ''

df['language_flag'] = df['language'].apply(language_to_flag)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
df = df.sort_values(by="$sort_column_name", ascending=(True if "$sort_order" == "asc" else False))

# –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
columns = "$columns".split(',')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(14, 8), dpi=150)  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —á–µ—Ç–∫–æ—Å—Ç—å
sns.lineplot(data=df, x='timestamp', y='wpm', label='WPM', color='deepskyblue', linewidth=3, marker='o', markersize=6)
sns.lineplot(data=df, x='timestamp', y='acc', label='Accuracy', color='limegreen', linewidth=3, marker='s', markersize=6)
plt.fill_between(df['timestamp'], df['wpm'], color='deepskyblue', alpha=0.1)
plt.fill_between(df['timestamp'], df['acc'], color='limegreen', alpha=0.1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π –∏ —Ñ–æ–Ω–∞
plt.xlabel('–î–∞—Ç–∞', fontsize=14)
plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=14)
plt.title('–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (WPM) –∏ —Ç–æ—á–Ω–æ—Å—Ç—å (Accuracy)', fontsize=18, pad=20)
plt.grid(color='gray', linestyle='--', linewidth=0.5, alpha=0.5)
plt.xticks(rotation=45)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ base64
buffer = BytesIO()
plt.savefig(buffer, format='png', transparent=True)
buffer.seek(0)
img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
buffer.close()

# –°–æ–∑–¥–∞–Ω–∏–µ Markdown —Ç–∞–±–ª–∏—Ü—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
with open("$output_file", 'w') as f:
    f.write('# –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏\n\n')
    f.write(f'![–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏](data:image/png;base64,{img_base64})\n\n')  # –í—Å—Ç–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    f.write('| ' + ' | '.join(columns) + ' |\n')
    f.write('| ' + ' | '.join(['---'] * len(columns)) + ' |\n')
    for _, row in df[columns].iterrows():
        row_data = [str(row[col]) for col in columns]
        f.write('| ' + ' | '.join(row_data) + ' |\n')

print(f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $output_file")
END
